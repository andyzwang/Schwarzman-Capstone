ggplot(aes(x = reorder(right, n), y = n, color = before_pipl)) +
geom_col(fill = "steelblue", position = "dodge") +
coord_flip() +
labs(
title = "Frequency of Individual Rights Referenced",
x = "Right",
y = "Count"
) +
theme_minimal()
new_long %>%
count(right, before_pipl) %>%
mutate(right = label_map[right]) %>%  # Replace with pretty label
ggplot(aes(x = reorder(right, n), y = n, color = before_pipl)) +
geom_col(, position = "dodge") +
coord_flip() +
labs(
title = "Frequency of Individual Rights Referenced",
x = "Right",
y = "Count"
) +
theme_minimal()
new_long %>%
count(right, before_pipl) %>%
mutate(right = label_map[right]) %>%  # Replace with pretty label
ggplot(aes(x = reorder(right, n), y = n, color = before_pipl)) +
geom_col(position = "dodge") +
coord_flip() +
labs(
title = "Frequency of Individual Rights Referenced",
x = "Right",
y = "Count"
) +
theme_minimal()
new_long %>%
count(right, before_pipl) %>%
mutate(right = label_map[right]) %>%  # Replace with pretty label
ggplot(aes(x = reorder(right, n), y = n, fill = before_pipl)) +
geom_col(position = "dodge") +
coord_flip() +
labs(
title = "Frequency of Individual Rights Referenced",
x = "Right",
y = "Count"
) +
theme_minimal()
new <- df %>%
filter(general_reference == "FALSE") %>%
mutate(year = year(date_enacted),
before_pipl = if_else(year < 2021, TRUE, FALSE),
n_rights = str_count(individual_rights, ",") + ifelse(str_detect(individual_rights, "\\[\\s*\\]"), 0, 1))
mean_before_after <- new %>%
group_by(before_pipl) %>%
summarize(mean = mean(n_rights))
mean_before_after
rights <- c(
"Know & Decide", "Access & Copy", "Rectification",
"Erasure", "Explanation", "Next of Kin", "Convenient Exercise & Remedy"
)
for (right in rights) {
colname <- make.names(right)  # Safe column name
new[[colname]] <- str_detect(new$individual_rights, fixed(right))
}
new_long <- new %>%
pivot_longer(cols = all_of(make.names(rights)),
names_to = "right",
values_to = "present") %>%
filter(present == TRUE)
# Your original labels after make.names()
old_names <- make.names(c(
"Know & Decide", "Access & Copy", "Rectification",
"Erasure", "Explanation", "Next of Kin", "Convenient Exercise & Remedy"
))
# Desired display labels
pretty_labels <- c(
"Know & Decide", "Access & Copy", "Rectification",
"Erasure", "Explanation", "Next of Kin", "Convenient Exercise & Remedy"
)
# Create named vector: names = old column names, values = display names
label_map <- setNames(pretty_labels, old_names)
new_long %>%
count(right, before_pipl) %>%
mutate(right = label_map[right]) %>%  # Replace with pretty label
ggplot(aes(x = reorder(right, n), y = n, fill = before_pipl)) +
geom_col(position = "dodge") +
coord_flip() +
labs(
title = "Frequency of Individual Rights Referenced",
x = "Right",
y = "Count"
) +
theme_minimal()
new_long %>%
count(right, before_pipl) %>%
mutate(right = label_map[right]) %>%  # Replace with pretty label
ggplot(aes(x = reorder(right, n), y = n, fill = before_pipl)) +
geom_col(position = "dodge") +
coord_flip() +
labs(
title = "Frequency of Individual Rights Referenced",
x = "Right",
y = "Count",
fill = "Before PIPL"
) +
theme_minimal()
new_long %>%
count(right, before_pipl) %>%
mutate(right = label_map[right]) %>%  # Replace with pretty label
ggplot(aes(x = reorder(right, n), y = n, fill = before_pipl)) +
geom_col(position = "dodge") +
coord_flip() +
labs(
title = "Frequency of Individual Rights Referenced",
x = "Right",
y = "Count"
) +
theme_minimal() +
scale_fill_manual(
name = "Period",
values = c("TRUE" = "#00bfc4", "FALSE" = "#f8766d"),
labels = c("TRUE" = "Pre-PIPL", "FALSE" = "Post-PIPL")
)
# Plot
new_long_resp %>%
count(responsibility, before_pipl) %>%
mutate(responsibility = label_map_resp[responsibility]) %>%
ggplot(aes(x = reorder(responsibility, n), y = n, fill = before_pipl)) +
geom_col(position = "dodge") +
coord_flip() +
labs(
title = "Frequency of Data Handler Responsibilities Referenced",
x = "Responsibility",
y = "Count"
) +
theme_minimal() +
scale_fill_manual(
name = "Period",
values = c("TRUE" = "#00bfc4", "FALSE" = "#f8766d"),
labels = c("TRUE" = "Pre-PIPL", "FALSE" = "Post-PIPL")
)
# Define the responsibilities
responsibilities <- c(
"Security & Management", "Protection Officer", "Local Representative",
"Compliance Audits", "Impact Assessment", "Incident Response & Notification",
"Platform Compliance", "Outsourced Processing"
)
# Safely create column names and detect presence
for (resp in responsibilities) {
colname <- make.names(resp)
new[[colname]] <- str_detect(new$handler_responsibilities, fixed(resp))
}
# Pivot to long format
new_long_resp <- new %>%
pivot_longer(cols = all_of(make.names(responsibilities)),
names_to = "responsibility",
values_to = "present") %>%
filter(present == TRUE)
# Create label map
old_resp_names <- make.names(responsibilities)
pretty_resp_labels <- responsibilities
label_map_resp <- setNames(pretty_resp_labels, old_resp_names)
# Plot
new_long_resp %>%
count(responsibility, before_pipl) %>%
mutate(responsibility = label_map_resp[responsibility]) %>%
ggplot(aes(x = reorder(responsibility, n), y = n, fill = before_pipl)) +
geom_col(position = "dodge") +
coord_flip() +
labs(
title = "Frequency of Data Handler Responsibilities Referenced",
x = "Responsibility",
y = "Count"
) +
theme_minimal() +
scale_fill_manual(
name = "Period",
values = c("TRUE" = "#00bfc4", "FALSE" = "#f8766d"),
labels = c("TRUE" = "Pre-PIPL", "FALSE" = "Post-PIPL")
)
# Plot
new_long_resp %>%
filter(!is.na(before_pipl)) %>%
count(responsibility, before_pipl) %>%
mutate(responsibility = label_map_resp[responsibility]) %>%
ggplot(aes(x = reorder(responsibility, n), y = n, fill = before_pipl)) +
geom_col(position = "dodge") +
coord_flip() +
labs(
title = "Frequency of Data Handler Responsibilities Referenced",
x = "Responsibility",
y = "Count"
) +
theme_minimal() +
scale_fill_manual(
name = "Period",
values = c("TRUE" = "#00bfc4", "FALSE" = "#f8766d"),
labels = c("TRUE" = "Pre-PIPL", "FALSE" = "Post-PIPL")
)
# Plot
new_long_kw %>%
count(keyword, before_pipl) %>%
mutate(keyword = label_map_kw[keyword]) %>%
ggplot(aes(x = reorder(keyword, n), y = n, fill = before_pipl)) +
geom_col(position = "dodge") +
coord_flip() +
labs(
title = "Frequency of PIPL-Defined Keywords Referenced",
x = "Keyword",
y = "Count"
) +
theme_minimal() +
scale_fill_manual(
name = "Period",
values = c("TRUE" = "#00bfc4", "FALSE" = "#f8766d"),
labels = c("TRUE" = "Pre-PIPL", "FALSE" = "Post-PIPL")
)
# Define the list of special PIPL terms
keywords <- c(
"Parental Consent for Minors",
"Cross-Border Transfer",
"Automated Decision-Making Transparency",
"De-Identification",
"Anonymization"
)
# Create logical columns for each keyword
for (kw in keywords) {
colname <- make.names(kw)
new[[colname]] <- str_detect(new$keywords, fixed(kw))
}
# Pivot longer
new_long_kw <- new %>%
pivot_longer(cols = all_of(make.names(keywords)),
names_to = "keyword",
values_to = "present") %>%
filter(present == TRUE)
# Pretty label mapping
old_kw_names <- make.names(keywords)
pretty_kw_labels <- keywords
label_map_kw <- setNames(pretty_kw_labels, old_kw_names)
# Plot
new_long_kw %>%
count(keyword, before_pipl) %>%
mutate(keyword = label_map_kw[keyword]) %>%
ggplot(aes(x = reorder(keyword, n), y = n, fill = before_pipl)) +
geom_col(position = "dodge") +
coord_flip() +
labs(
title = "Frequency of PIPL-Defined Keywords Referenced",
x = "Keyword",
y = "Count"
) +
theme_minimal() +
scale_fill_manual(
name = "Period",
values = c("TRUE" = "#00bfc4", "FALSE" = "#f8766d"),
labels = c("TRUE" = "Pre-PIPL", "FALSE" = "Post-PIPL")
)
View(new)
View(new)
View(new_long_resp)
View(new_long_kw)
View(new_long_resp)
View(new_long)
new <- new %>%
mutate(
rights_count = lengths(individual_rights),
responsibilities_count = lengths(handler_responsibilities),
keywords_count = lengths(keywords)
)
# Group by PIPL mention (TRUE/FALSE) and calculate means
new %>%
group_by(pipl_mention) %>%
summarise(
avg_rights = mean(rights_count, na.rm = TRUE),
avg_responsibilities = mean(responsibilities_count, na.rm = TRUE),
avg_keywords = mean(keywords_count, na.rm = TRUE),
n = n()
)
new <- df %>%
filter(general_reference == "FALSE") %>%
mutate(year = year(date_enacted),
before_pipl = if_else(year < 2021, TRUE, FALSE),
n_rights = str_count(individual_rights, ",") + ifelse(str_detect(individual_rights, "\\[\\s*\\]"), 0, 1))
# Define the responsibilities
responsibilities <- c(
"Security & Management", "Protection Officer", "Local Representative",
"Compliance Audits", "Impact Assessment", "Incident Response & Notification",
"Platform Compliance", "Outsourced Processing"
)
# Safely create column names and detect presence
for (resp in responsibilities) {
colname <- make.names(resp)
new[[colname]] <- str_detect(new$handler_responsibilities, fixed(resp))
}
# Pivot to long format
new_long_resp <- new %>%
pivot_longer(cols = all_of(make.names(responsibilities)),
names_to = "responsibility",
values_to = "present") %>%
filter(present == TRUE)
# Create label map
old_resp_names <- make.names(responsibilities)
pretty_resp_labels <- responsibilities
label_map_resp <- setNames(pretty_resp_labels, old_resp_names)
# Plot
new_long_resp %>%
filter(!is.na(before_pipl)) %>%
count(responsibility, before_pipl) %>%
mutate(responsibility = label_map_resp[responsibility]) %>%
ggplot(aes(x = reorder(responsibility, n), y = n, fill = before_pipl)) +
geom_col(position = "dodge") +
coord_flip() +
labs(
title = "Frequency of Data Handler Responsibilities Referenced",
x = "Responsibility",
y = "Count"
) +
theme_minimal() +
scale_fill_manual(
name = "Period",
values = c("TRUE" = "#00bfc4", "FALSE" = "#f8766d"),
labels = c("TRUE" = "Pre-PIPL", "FALSE" = "Post-PIPL")
)
# Define the list of special PIPL terms
keywords <- c(
"Parental Consent for Minors",
"Cross-Border Transfer",
"Automated Decision-Making Transparency",
"De-Identification",
"Anonymization"
)
# Create logical columns for each keyword
for (kw in keywords) {
colname <- make.names(kw)
new[[colname]] <- str_detect(new$keywords, fixed(kw))
}
# Pivot longer
new_long_kw <- new %>%
pivot_longer(cols = all_of(make.names(keywords)),
names_to = "keyword",
values_to = "present") %>%
filter(present == TRUE)
# Pretty label mapping
old_kw_names <- make.names(keywords)
pretty_kw_labels <- keywords
label_map_kw <- setNames(pretty_kw_labels, old_kw_names)
# Plot
new_long_kw %>%
count(keyword, before_pipl) %>%
mutate(keyword = label_map_kw[keyword]) %>%
ggplot(aes(x = reorder(keyword, n), y = n, fill = before_pipl)) +
geom_col(position = "dodge") +
coord_flip() +
labs(
title = "Frequency of PIPL-Defined Keywords Referenced",
x = "Keyword",
y = "Count"
) +
theme_minimal() +
scale_fill_manual(
name = "Period",
values = c("TRUE" = "#00bfc4", "FALSE" = "#f8766d"),
labels = c("TRUE" = "Pre-PIPL", "FALSE" = "Post-PIPL")
)
new <- new %>%
mutate(
n_rights = str_count(individual_rights, ",") + ifelse(str_detect(individual_rights, "\\[\\s*\\]"), 0, 1),
n_responsibilities = str_count(handler_responsibilities, ",") + ifelse(str_detect(handler_responsibilities, "\\[\\s*\\]"), 0, 1),
n_keywords = str_count(keywords, ",") + ifelse(str_detect(keywords, "\\[\\s*\\]"), 0, 1)
)
# Group by PIPL mention (TRUE/FALSE) and calculate means
new %>%
group_by(pipl_mention) %>%
summarise(
avg_rights = mean(rights_count, na.rm = TRUE),
avg_responsibilities = mean(responsibilities_count, na.rm = TRUE),
avg_keywords = mean(keywords_count, na.rm = TRUE),
n = n()
)
# Group by PIPL mention (TRUE/FALSE) and calculate means
new %>%
group_by(pipl_mention) %>%
summarise(
avg_rights = mean(n_rights, na.rm = TRUE),
avg_responsibilities = mean(n_responsibilities, na.rm = TRUE),
avg_keywords = mean(n_keywords, na.rm = TRUE),
n = n()
)
t.test(avg_rights ~ pipl_mention, data = new)
t.test(n_rights ~ pipl_mention, data = new)
t.test(n_responsibilities ~ pipl_mention, data = new)
t.test(n_keywords ~ pipl_mention, data = new)
t.test(n_rights ~ pipl_mention, data = new)
t.test(n_rights ~ pipl_mention, data = new)
# Group by PIPL mention (TRUE/FALSE) and calculate means
new %>%
group_by(pipl_mention) %>%
summarise(
avg_rights = mean(n_rights, na.rm = TRUE),
avg_responsibilities = mean(n_responsibilities, na.rm = TRUE),
avg_keywords = mean(n_keywords, na.rm = TRUE),
n = n()
)
t.test(n_rights ~ pipl_mention, data = new)
t.test(n_responsibilities ~ pipl_mention, data = new)
t.test(n_keywords ~ pipl_mention, data = new)
new %>%
filter(folder == "privacy")
new %>%
filter(folder == "privacy") %>%
group_by(jurisdiction) %>%
summarize(n = n())
new %>%
filter(folder == "privacy") %>%
group_by(jurisdiction) %>%
summarise(n = n(), .groups = "drop") %>%      # count per group, then ungroup
mutate(percent = n / sum(n) * 100)
new %>%
filter(folder == "privacy") %>%
filter(jurisdiction == "city") %>%
group_by("jurisdiction_name") %>%
summarise(n = n(), .groups = "drop") %>%
arrange(desc(n))
new %>%
filter(folder == "privacy") %>%
filter(jurisdiction == "city") %>%
group_by(jurisdiction_name) %>%
summarise(n = n(), .groups = "drop") %>%
arrange(desc(n))
new %>%
filter(folder == "privacy") %>%
filter(jurisdiction == "city") %>%
group_by(jurisdiction_name) %>%
summarise(n = n(), .groups = "drop") %>%
arrange(desc(n)) %>%
mutate(percent = n / sum(n) * 100)
new %>%
filter(folder == "privacy") %>%
filter(jurisdiction == "province") %>%
group_by(jurisdiction_name) %>%
summarise(n = n(), .groups = "drop") %>%
arrange(desc(n)) %>%
mutate(percent = n / sum(n) * 100)
new %>%
filter(folder == "privacy") %>%
filter(jurisdiction == "province") %>%
group_by(jurisdiction_name) %>%
summarise(n = n(), .groups = "drop") %>%
arrange(desc(n)) %>%
mutate(percent = n / sum(n) * 100)
new %>%
filter(folder == "privacy") %>%
filter(jurisdiction == "provincal") %>%
group_by(jurisdiction_name) %>%
summarise(n = n(), .groups = "drop") %>%
arrange(desc(n)) %>%
mutate(percent = n / sum(n) * 100)
new %>%
filter(folder == "privacy") %>%
filter(jurisdiction == "provincial") %>%
group_by(jurisdiction_name) %>%
summarise(n = n(), .groups = "drop") %>%
arrange(desc(n)) %>%
mutate(percent = n / sum(n) * 100)
new %>%
filter(folder == "data protection") %>%
group_by(jurisdiction) %>%
summarise(n = n(), .groups = "drop") %>%      # count per group, then ungroup
mutate(percent = n / sum(n) * 100)
new %>%
filter(folder == "data protection") %>%
filter(jurisdiction == "provincial") %>%
group_by(jurisdiction_name) %>%
summarise(n = n(), .groups = "drop") %>%
arrange(desc(n)) %>%
mutate(percent = n / sum(n) * 100)
new %>%
filter(folder == "data protection") %>%
filter(jurisdiction == "city") %>%
group_by(jurisdiction_name) %>%
summarise(n = n(), .groups = "drop") %>%
arrange(desc(n)) %>%
mutate(percent = n / sum(n) * 100)
# Convert string like "['Education', 'Health']" into list-column
new_cleaned <- new %>%
mutate(sector = str_remove_all(sector, "\\[|\\]|'")) %>%     # remove brackets and quotes
mutate(sector = str_split(sector, ",")) %>%                  # split into character vectors
mutate(sector = map(sector, str_trim))                       # trim whitespace from each
# Unnest sectors to long format
sector_counts <- new_cleaned %>%
unnest(sector) %>%
distinct(file_path, sector) %>%        # optional: count each sector once per doc
count(sector, name = "count") %>%
mutate(percentage = count / nrow(new_cleaned) * 100)
sector_counts %>%
arrange(desc(percentage))
sc <- sector_counts %>%
arrange(desc(percentage))
View(sc)
# Convert string like "['Education', 'Health']" into list-column
new_cleaned <- new %>%
mutate(solove_classification = str_remove_all(solove_classification, "\\[|\\]|'")) %>%     # remove brackets and quotes
mutate(solove_classification = str_split(solove_classification, ",")) %>%                  # split into character vectors
mutate(solove_classification = map(solove_classification, str_trim))                       # trim whitespace from each
# Unnest sectors to long format
solove_counts <- new_cleaned %>%
unnest(solove_classification) %>%
distinct(file_path, solove_classification) %>%        # optional: count each sector once per doc
count(solove_classification, name = "count") %>%
mutate(percentage = count / nrow(new_cleaned) * 100)
sc <- solove_counts %>%
arrange(desc(percentage))
sc
